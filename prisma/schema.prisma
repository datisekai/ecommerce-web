generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Permission {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  actions Action[]
  users   User[]
}

model PermissionList {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  actions    Action[]
  privileges Privilege[]
}

model Privilege {
  code      String         @id
  name      String
  perListId Int
  perList   PermissionList @relation(fields: [perListId], references: [id])
  actions   Action[]
}

model Action {
  id         Int            @id @default(autoincrement())
  code       String
  perListId  Int
  perId      Int
  perList    PermissionList @relation(fields: [perListId], references: [id])
  permission Permission     @relation(fields: [perId], references: [id])
  privilege  Privilege      @relation(fields: [code], references: [code])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  isActive      Boolean       @default(true)
  phone         String?       @unique @db.VarChar(10)
  password      String?       @db.Text
  nameShop      String?
  gender        String?
  date          DateTime?     @db.Timestamp()
  perId         Int?          @default(1)
  permission    Permission?   @relation(fields: [perId], references: [id])
  contacts      ContactUser[]
  supports      SupportUser[]
  products      Product[]
  comments      Comment[]
  voucherUsers  VoucherUser[]
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model ContactUser {
  id      Int    @id @default(autoincrement())
  address String @db.Text
  phone   String @db.VarChar(10)
  name    String @db.Text
  userId  String
  user    User   @relation(fields: [userId], references: [id])
}

model SupportUser {
  id     Int    @id @default(autoincrement())
  code   Int
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Category {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  parentId         Int?
  sellerId         String?
  image            String            @db.Text
  products         Product[]
  categoryProducts CategoryProduct[]
}

model CategoryProduct {
  id         Int      @id @default(autoincrement())
  categoryId Int
  productId  Int
  categorys  Category @relation(fields: [categoryId], references: [id])
  products   Product  @relation(fields: [productId], references: [id])
}

model Product {
  id               Int               @id @default(autoincrement())
  slug             String            @unique
  name             String
  description      String?
  categoryId       Int
  sellerId         String
  category         Category          @relation(fields: [categoryId], references: [id])
  seller           User              @relation(fields: [sellerId], references: [id])
  variants         Variant[]
  variantOptions   VariantOption[]
  skus             Sku[]
  skuValues        SkuValue[]
  comments         Comment[]
  createdAt        DateTime          @default(now()) @db.Timestamp
  image            String
  categoryProducts CategoryProduct[]
}

model Variant {
  id             Int             @id @default(autoincrement())
  name           String
  productId      Int
  product        Product         @relation(fields: [productId], references: [id])
  variantOptions VariantOption[]
  skuValues      SkuValue[]
}

model VariantOption {
  id        Int        @id @default(autoincrement())
  name      String
  variantId Int
  productId Int
  variant   Variant    @relation(fields: [variantId], references: [id])
  product   Product    @relation(fields: [productId], references: [id])
  skuValues SkuValue[]
}

model Sku {
  id           Int           @id @default(autoincrement())
  price        Int
  qty          Int           @default(0)
  discount     Int           @default(0)
  image        String
  productId    Int
  product      Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  skuValues    SkuValue[]
  cartDetails  CartDetail[]
  orderDetails OrderDetail[]
}

model SkuValue {
  id              Int           @id @default(autoincrement())
  productId       Int
  variantId       Int
  variantOptionId Int
  skuId           Int
  product         Product       @relation(fields: [productId], references: [id])
  variant         Variant       @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantOption   VariantOption @relation(fields: [variantOptionId], references: [id], onDelete: Cascade)
  sku             Sku           @relation(fields: [skuId], references: [id], onDelete: Cascade)
}

model Comment {
  id            Int            @id @default(autoincrement())
  content       String         @db.Text
  pointStar     Int            @default(5)
  userId        String
  productId     Int
  user          User           @relation(fields: [userId], references: [id])
  product       Product        @relation(fields: [productId], references: [id])
  commentImages CommentImage[]
}

model CommentImage {
  id        Int     @id @default(autoincrement())
  image     String  @db.Text
  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id])
}

model Slider {
  id    Int     @id @default(autoincrement())
  image String  @db.Text
  url   String?
}

model Voucher {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  discount     Int           @default(0)
  limitPrice   Int           @default(0)
  sellerId     String?
  voucherUsers VoucherUser[]
}

model VoucherUser {
  id        Int     @id @default(autoincrement())
  userId    String
  voucherId Int
  user      User    @relation(fields: [userId], references: [id])
  voucher   Voucher @relation(fields: [voucherId], references: [id])
}

model Cart {
  id          Int          @id @default(autoincrement())
  sellerId    String
  userId      String
  cartDetails CartDetail[]
}

model CartDetail {
  id     Int  @id @default(autoincrement())
  skuId  Int
  qty    Int  @default(0)
  cartId Int
  sku    Sku  @relation(fields: [skuId], references: [id])
  cart   Cart @relation(fields: [cartId], references: [id])
}

model Status {
  id     Int     @id @default(autoincrement())
  name   String
  orders Order[]
}

model Order {
  id           Int           @id @default(autoincrement())
  userId       String
  total        BigInt        @default(0)
  sellerId     String
  statusId     Int
  isPay        Boolean       @default(false)
  createdAt    DateTime      @default(now()) @db.Timestamp()
  updatedAt    DateTime      @default(now()) @db.Timestamp()
  status       Status        @relation(fields: [statusId], references: [id])
  orderDetails OrderDetail[]
  orderReports OrderReport?
}

model OrderDetail {
  id       Int    @id @default(autoincrement())
  orderId  Int
  skuId    Int
  price    BigInt
  discount Int
  qty      Int    @default(0)
  order    Order  @relation(fields: [orderId], references: [id])
  sku      Sku    @relation(fields: [skuId], references: [id])
}

model OrderReport {
  id                Int                @id @default(autoincrement())
  isDone            Boolean            @default(false)
  description       String             @db.Text
  orderId           Int                @unique
  order             Order              @relation(fields: [orderId], references: [id])
  orderReportImages OrderReportImage[]
}

model OrderReportImage {
  id            Int         @id @default(autoincrement())
  image         String      @db.Text
  orderReportId Int
  orderReport   OrderReport @relation(fields: [orderReportId], references: [id])
}

//npx prisma db push
model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
